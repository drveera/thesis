\select@language {english}
\contentsline {figure}{\numberline {1.1}{\ignorespaces A beowulf cluster.~\cite {beowulf}\relax }}{1}
\contentsline {figure}{\numberline {1.2}{\ignorespaces The Cray I.~\cite {crayi}\relax }}{1}
\contentsline {figure}{\numberline {1.3}{\ignorespaces IBM's Blue Gene.~\cite {blue_gene}\relax }}{1}
\contentsline {figure}{\numberline {1.4}{\ignorespaces The spectrum of environmental security requirements based on uses and stakeholders.\relax }}{2}
\contentsline {figure}{\numberline {1.5}{\ignorespaces Unmodified computing nodes.\relax }}{3}
\contentsline {figure}{\numberline {1.6}{\ignorespaces TDMA overlaid onto Figure~\ref {fig:simple_TDMA_introduction_pt1}\relax }}{3}
\contentsline {figure}{\numberline {3.1}{\ignorespaces An abstract HPC environment.\relax }}{6}
\contentsline {figure}{\numberline {3.2}{\ignorespaces The $KG-200$ Inline Media Encryptor, certified by the NSA for use in securing persistent storage~\cite {nsa_ime_website}.\relax }}{7}
\contentsline {figure}{\numberline {3.3}{\ignorespaces The assumed model of application execution in an HPC environment. $\alpha _{start}$ and $\alpha _{end}$ are periods where execution is I/O bound, and $\varepsilon $ is the prominent period where execution is CPU bound. This structure adheres to research showing batched I/O minimizes the I/O cost in terms of time.\relax }}{9}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Simple example of common actions on an HPC network.\relax }}{11}
\contentsline {figure}{\numberline {3.5}{\ignorespaces Actions that could permit data sharing between different user applications.\relax }}{12}
\contentsline {figure}{\numberline {5.1}{\ignorespaces A simple round-robin time window policy for two \textit {security groups} (S.G.$\#1$ and $\#2$).\relax }}{16}
\contentsline {figure}{\numberline {5.2}{\ignorespaces A simple example of network access switching between two \textit {security groups} (S.G.$\#1$ and $\#2$).\relax }}{17}
\contentsline {figure}{\numberline {6.1}{\ignorespaces State diagram of a compute node running the state controller.\relax }}{26}
\contentsline {figure}{\numberline {6.2}{\ignorespaces Data flow architecture of \textit {iptables}, the packet filtering firewall with \textit {NetFilter} located within the Linux kernel. The input and output ''chains" within \textit {NetFilter} provide an interface for administrators to control and filter packets sent into user space.\relax }}{28}
\contentsline {figure}{\numberline {6.3}{\ignorespaces A detailed look at the logic within the \textit {NetFilter} chains that makeup the Ingress and Egress controllers on compute nodes.\relax }}{29}
\contentsline {figure}{\numberline {6.4}{\ignorespaces State diagram of an example window controller.\relax }}{30}
\contentsline {figure}{\numberline {7.1}{\ignorespaces The network architecture of TDMA testbed.\relax }}{31}
\contentsline {figure}{\numberline {7.2}{\ignorespaces A trace of network traffic under performance testing while TDMA controls access.\relax }}{33}
\contentsline {figure}{\numberline {7.3}{\ignorespaces The impact of TDMA on TCP performance under two different 'netperf' tests.\relax }}{34}
\contentsline {figure}{\numberline {7.4}{\ignorespaces RTT of \textit {ping} under TDMA.\relax }}{35}
\contentsline {figure}{\numberline {7.5}{\ignorespaces Linear regression fits of two high RTT sections within RTT results under TDMA.\relax }}{36}
\contentsline {figure}{\numberline {B.1}{\ignorespaces The TDMA test bed located in Impact Lab at Arizona State University.\relax }}{44}
